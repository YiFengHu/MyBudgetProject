package com.dreamer.mybudget;

import com.dreamer.mybudget.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DETAIL.
 */
public class Detail {

    private Long did;
    /** Not-null value. */
    private String io;
    private long time;
    private int price;
    private long category_cid;
    private String mark;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DetailDao myDao;

    private Category categoryName;
    private Long categoryName__resolvedKey;


    public Detail() {
    }

    public Detail(Long did) {
        this.did = did;
    }

    public Detail(Long did, String io, long time, int price, long category_cid, String mark) {
        this.did = did;
        this.io = io;
        this.time = time;
        this.price = price;
        this.category_cid = category_cid;
        this.mark = mark;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDetailDao() : null;
    }

    public Long getDid() {
        return did;
    }

    public void setDid(Long did) {
        this.did = did;
    }

    /** Not-null value. */
    public String getIo() {
        return io;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIo(String io) {
        this.io = io;
    }

    public long getTime() {
        return time;
    }

    public void setTime(long time) {
        this.time = time;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public long getCategory_cid() {
        return category_cid;
    }

    public void setCategory_cid(long category_cid) {
        this.category_cid = category_cid;
    }

    public String getMark() {
        return mark;
    }

    public void setMark(String mark) {
        this.mark = mark;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategoryName() {
        long __key = this.category_cid;
        if (categoryName__resolvedKey == null || !categoryName__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNameNew = targetDao.load(__key);
            synchronized (this) {
                categoryName = categoryNameNew;
            	categoryName__resolvedKey = __key;
            }
        }
        return categoryName;
    }

    public void setCategoryName(Category categoryName) {
        if (categoryName == null) {
            throw new DaoException("To-one property 'category_cid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.categoryName = categoryName;
            category_cid = categoryName.getCid();
            categoryName__resolvedKey = category_cid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
