package com.dreamer.mybudget;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dreamer.mybudget.Detail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DETAIL.
*/
public class DetailDao extends AbstractDao<Detail, Long> {

    public static final String TABLENAME = "DETAIL";

    /**
     * Properties of entity Detail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Did = new Property(0, long.class, "did", true, "DID");
        public final static Property Io = new Property(1, String.class, "io", false, "IO");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property Price = new Property(3, int.class, "price", false, "PRICE");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Mark = new Property(5, String.class, "mark", false, "MARK");
    };


    public DetailDao(DaoConfig config) {
        super(config);
    }
    
    public DetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DETAIL' (" + //
                "'DID' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: did
                "'IO' TEXT NOT NULL ," + // 1: io
                "'TIME' INTEGER NOT NULL ," + // 2: time
                "'PRICE' INTEGER NOT NULL ," + // 3: price
                "'TYPE' TEXT NOT NULL ," + // 4: type
                "'MARK' TEXT);"); // 5: mark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Detail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDid());
        stmt.bindString(2, entity.getIo());
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getPrice());
        stmt.bindString(5, entity.getType());
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(6, mark);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Detail readEntity(Cursor cursor, int offset) {
        Detail entity = new Detail( //
            cursor.getLong(offset + 0), // did
            cursor.getString(offset + 1), // io
            cursor.getLong(offset + 2), // time
            cursor.getInt(offset + 3), // price
            cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Detail entity, int offset) {
        entity.setDid(cursor.getLong(offset + 0));
        entity.setIo(cursor.getString(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setPrice(cursor.getInt(offset + 3));
        entity.setType(cursor.getString(offset + 4));
        entity.setMark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Detail entity, long rowId) {
        entity.setDid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Detail entity) {
        if(entity != null) {
            return entity.getDid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
